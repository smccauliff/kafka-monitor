plugins {
    id 'net.vivin.gradle-semantic-build-versioning' version "2.0.2"
}

allprojects {
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'net.vivin.gradle-semantic-build-versioning'

  sourceCompatibility = 1.7

  repositories {
    mavenCentral()
  }

  checkstyle {
    configFile = new File(rootDir, "checkstyle/checkstyle.xml")
  }
  test.dependsOn('checkstyleMain', 'checkstyleTest')

  test {
    useTestNG()

    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
  }
}

project(':services') {
  dependencies {
    compile 'net.sourceforge.argparse4j:argparse4j:0.5.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.6'
    compile 'org.apache.avro:avro:1.4.0'
    compile 'org.apache.kafka:kafka_2.11:0.10.0.1'
    compile 'org.apache.kafka:kafka-clients:0.10.0.1'
    compile 'org.testng:testng:6.8.8'
    compile 'org.eclipse.jetty:jetty-server:8.1.19.v20160209'
    compile 'org.json:json:20140107'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.1'
    compile 'org.jolokia:jolokia-jvm:1.3.3'

    testCompile 'org.testng:testng:6.8.8'
  }

  tasks.create(name: "copyDependantLibs", type: Copy) {
    from (configurations.testRuntime) {
      include('slf4j-log4j12*')
    }
    from (configurations.runtime) {
    }
    into "build/dependant-libs"
    duplicatesStrategy 'exclude'
  }

  jar {
    dependsOn 'copyDependantLibs'
  }

  task testJar(type: Jar) {
    classifier = 'test'
    from sourceSets.test.output
  }

  artifacts {
    archives testJar
  }

}

project(':tests') {

  dependencies {
    compile project(':services')
  }

  test {
    useTestNG()

    testLogging {
      events "passed", "skipped", "failed"
      exceptionFormat = 'full'
    }
  }
}

project(':core') {
  dependencies {
    compile project(':tests')
  }
}


task wrapper(type: Wrapper) {
   gradleVersion = '2.11'
}

def generateTravisPublishConfig(version) {
 def templateDefinition =  '''{

    "package": {
        "name": "kafka-monitor-release", // Bintray package name
        "repo": "kafka-monitor", // Bintray repository name
        "subject": "li-kafka", // Bintray subject (user or organization)
        "desc": "A monitor for Apache Kafka",
        "issue_tracker_url": "https://github.com/linkedin/kafka-monitor/issues",
        "vcs_url": "https://github.com/linkedin/kafka-monitor",
        "github_use_tag_release_notes": true,
        "licenses": ["Apache-2"],
        "public_download_numbers": false,
        "public_stats": false,
    },

    "version": {
        "name": "$version",
        "released": "$releaseDate",
        "gpgSign": false
    },

    "files":
        [
        {"includePattern": "**/build/libs/(*.jar)", "uploadPattern": "/\\$1"}
        ],
    "publish": true
  }'''

  def dateFormatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  dateFormatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC"))
  def releaseDate = dateFormatter.format(new Date())
  def templateParameters = ["version": version.toString(), "releaseDate" : releaseDate]
  def templateEngine = new groovy.text.SimpleTemplateEngine()
  def templateInstance = templateEngine.createTemplate(templateDefinition).make( templateParameters )
  return templateInstance.toString()
}

build.doLast{ 
  def config = generateTravisPublishConfig(version)
  def fileWriter = new FileWriter("build/travis.publish.config")
  fileWriter.write(config, 0, config.length())
  fileWriter.close()
}



